<!DOCTYPE html>
<html>
  <head>
    <title>theBeast - example 3</title>
    <script type="text/javascript" src="http://code.jquery.com/jquery-1.7.min.js"></script>
    <script src="theBeast.js" type="text/javascript"></script>
    <link media="screen" rel="stylesheet" href="site.css" type="text/css">
    <script>
      theBeast.add({
        fadeIn: function(){
          console.log("loading fadein module");
          return {
            executeAnyway: function(){
              var self = this;
              $(this).hide();
              console.log("calling fadein executeAnyway function");
              $("#example-1").click(function(){
                self.fadeIn(500, function(){
                  var $this = $(this);
                  setTimeout(function(){$this.fadeOut(500)}, 500)});
              });
            }
          }
        }
      });
    </script>
  </head>
  <body>
    <h1>theBeast example 3: executeAnyway</h1>
    <div class="download"><a href="theBeast.js">theBeast.js</a>&nbsp;|&nbsp;<a href="theBeast.min.js">theBeast.min.js</a></div>
    <div id="content">
      <p>Sometimes we would need the module to execute some specific instruction every time it is declared in the DOM and not just only once and for all. For example: how do I populate my DIVs that fade in and out with dynamic text? This can be achieved by implementing the executeAnyway function in the module. the variable "this" in this function refers the jQuery DOM element where the module is declared</p>
      <h2>Allows you to manipulate the element declaring the module directly</h2>
      <p>Let's take the same example as previously, but we'll implement executeAnyway this time. The big change is that we're using the 'this' variable instead of the jQuery selector: $('[data-theBeast="fadeIn"]').</p>
      <code>
  theBeast.add({<br/>
  &nbsp;<strong>fadeIn</strong>: function(){<br/>
  &nbsp;&nbsp;console.log("loading fadein module");<br/>
  &nbsp;&nbsp;return {<br/>
  &nbsp;&nbsp;&nbsp;<em>executeAnyway</em>: function(){<br/>
  &nbsp;&nbsp;&nbsp;&nbsp;var self = this;<br/>
  &nbsp;&nbsp;&nbsp;&nbsp;console.log("calling fadein executeAnyway function");<br/>
  &nbsp;&nbsp;&nbsp;&nbsp;$("#example-1").click(function(){<br/>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.fadeIn(500, function(){<br/>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var $this = $(this);<br/>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(function(){$this.fadeOut(500)}, 500)});<br/>
  &nbsp;&nbsp;&nbsp;&nbsp;});<br/>
  &nbsp;&nbsp;&nbsp;}<br/>
  &nbsp;&nbsp;}<br/>
  &nbsp;}<br/>
  });<br/>
      </code><br/>
      <button id="example-1">DO IT!</button><br/>
      <div data-theBeast="fadeIn" class="rect">This is the div that fades in and out!</div>
      <div data-theBeast="fadeIn" class="rect">This is another div that fades in and out!</div>
      <h2>Avoid unactivated modules with executeAnyway</h2>
      <p>This is a very simple example of what executeAnyway can be used for. There are many other situation where it can be useful. One can be to initialize content loaded dynamically. Since the modules are loaded only once. If content is added dynamically with a data-theBeast attribute that has already been loaded, it won't work unless you implement executeAnyway. Let's take an example of a module that register a DIV to the click event:</p>
      <code>
  theBeast.add({<br/>
  &nbsp;<strong>alertOnClick</strong>: function(){<br/>
  &nbsp;&nbsp;$("[data-theBeast='alertOnClick']").click(function(){alert("clicked!")});<br/>
  &nbsp;}<br/>
  });<br/>
      </code><br/>
      <p>This will work as long as a new element with the attribute data-theBeast='alertOnClick' is not loaded dynamically. The bulletproof solution is:</p>
      <code>
  theBeast.add({<br/>
  &nbsp;<strong>alertOnClick</strong>: function(){<br/>
  &nbsp;&nbsp;return {<br/>
  &nbsp;&nbsp;&nbsp;<em>executeAnyway</em>: function(){<br/>
  &nbsp;&nbsp;&nbsp;&nbsp;this.click(function(){alert("clicked!")});<br/>
  &nbsp;&nbsp;&nbsp;}<br/>
  &nbsp;}<br/>
  });<br/>
      </code><br/>
      <a href="/example2">&lt;&lt; previous</a>&nbsp;
      <% (1..settings.page_count).each do |page_number| %><a href="/example<%= page_number %>"><%= page_number %></a>&nbsp;<% end %>
      <a href="/example4">next &gt;&gt;</a>
    </div>
  </body>
</html>